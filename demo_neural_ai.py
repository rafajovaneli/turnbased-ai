#!/usr/bin/env python3
"""
Demonstra√ß√£o da IA Neural no jogo de combate por turnos
"""

import sys
from game import run_game_with_neural_ai, run_game_with_minimax, run_window_manager
from game.neural_ai import create_neural_ai
from game.config import GAME_CONFIG

def demo_neural_ai():
    """Demonstra as capacidades da IA Neural"""
    print("üß† DEMONSTRA√á√ÉO DA IA NEURAL")
    print("=" * 50)
    
    # Cria inst√¢ncia da IA Neural
    neural_ai = create_neural_ai()
    
    # Mostra estat√≠sticas iniciais
    stats = neural_ai.get_performance_stats()
    print(f"üìä Estat√≠sticas Iniciais:")
    print(f"   ‚Ä¢ Experi√™ncias: {stats['experience_count']}")
    print(f"   ‚Ä¢ √âpocas de treinamento: {stats['training_epochs']}")
    print(f"   ‚Ä¢ Modelo existe: {stats['model_exists']}")
    
    print("\nüéÆ Testando decis√µes da IA Neural:")
    print("-" * 30)
    
    # Testa algumas decis√µes
    test_scenarios = [
        {"player_hp": 300, "enemy_hp": 300, "desc": "In√≠cio do jogo"},
        {"player_hp": 100, "enemy_hp": 200, "desc": "Jogador em desvantagem"},
        {"player_hp": 50, "enemy_hp": 50, "desc": "Ambos com HP baixo"},
        {"player_hp": 250, "enemy_hp": 100, "desc": "Jogador em vantagem"},
        {"player_hp": 30, "enemy_hp": 200, "desc": "Situa√ß√£o cr√≠tica"}
    ]
    
    for i, scenario in enumerate(test_scenarios, 1):
        action = neural_ai.decide_action(
            scenario["player_hp"], 
            scenario["enemy_hp"], 
            turn_count=i
        )
        
        print(f"{i}. {scenario['desc']}")
        print(f"   Player HP: {scenario['player_hp']}, Enemy HP: {scenario['enemy_hp']}")
        print(f"   IA escolheu: {action}")
        
        # Simula aprendizado
        result_score = 0.5 if action == "attack" else 0.2
        neural_ai.learn_from_experience(
            scenario["player_hp"], scenario["enemy_hp"],
            action, result_score, turn_count=i
        )
        print(f"   Aprendizado aplicado (score: {result_score})")
        print()
    
    # Estat√≠sticas finais
    final_stats = neural_ai.get_performance_stats()
    print(f"üìä Estat√≠sticas Finais:")
    print(f"   ‚Ä¢ Experi√™ncias: {final_stats['experience_count']}")
    print(f"   ‚Ä¢ Diferen√ßa: +{final_stats['experience_count'] - stats['experience_count']}")
    
    print("\n" + "=" * 50)
    print("Demonstra√ß√£o conclu√≠da!")

def menu_principal():
    """Menu principal da demonstra√ß√£o"""
    while True:
        print("\nüéÆ DEMONSTRA√á√ÉO - COMBATE POR TURNOS COM IA NEURAL")
        print("=" * 55)
        print("1. üß† Testar IA Neural (Console)")
        print("2. üéØ Testar IA Minimax (Console)")
        print("3. üñ•Ô∏è  Interface Gr√°fica Completa")
        print("4. üìä Demonstra√ß√£o da IA Neural")
        print("5. ‚öôÔ∏è  Configura√ß√µes Atuais")
        print("6. ‚ùå Sair")
        print("-" * 55)
        
        try:
            escolha = input("Escolha uma op√ß√£o (1-6): ").strip()
            
            if escolha == "1":
                print("\nüß† Iniciando jogo com IA Neural...")
                run_game_with_neural_ai()
                
            elif escolha == "2":
                print("\nüéØ Iniciando jogo com IA Minimax...")
                run_game_with_minimax()
                
            elif escolha == "3":
                print("\nüñ•Ô∏è Abrindo interface gr√°fica...")
                run_window_manager()
                
            elif escolha == "4":
                demo_neural_ai()
                
            elif escolha == "5":
                mostrar_configuracoes()
                
            elif escolha == "6":
                print("\nüëã Obrigado por testar!")
                break
                
            else:
                print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saindo...")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

def mostrar_configuracoes():
    """Mostra configura√ß√µes atuais do jogo"""
    print("\n‚öôÔ∏è CONFIGURA√á√ïES ATUAIS")
    print("=" * 30)
    
    print("üéÆ Configura√ß√µes de Jogo:")
    print(f"   ‚Ä¢ HP M√°ximo: {GAME_CONFIG['MAX_HP']}")
    print(f"   ‚Ä¢ Ataque Jogador: {GAME_CONFIG['PLAYER_ATTACK']}")
    print(f"   ‚Ä¢ Ataque IA: {GAME_CONFIG['AI_ATTACK']}")
    print(f"   ‚Ä¢ Defesa Jogador: {GAME_CONFIG['PLAYER_DEFENSE']}")
    print(f"   ‚Ä¢ Defesa IA: {GAME_CONFIG['AI_DEFENSE']}")
    
    print("\nü§ñ Configura√ß√µes de IA:")
    print(f"   ‚Ä¢ Tipo de IA: {GAME_CONFIG['AI_TYPE']}")
    print(f"   ‚Ä¢ Profundidade Minimax: {GAME_CONFIG['MINIMAX_DEPTH']}")
    print(f"   ‚Ä¢ Aprendizado Neural: {GAME_CONFIG['NEURAL_LEARNING']}")
    
    print("\nüíö Configura√ß√µes de Cura:")
    print(f"   ‚Ä¢ Cura M√≠nima: {GAME_CONFIG['HEAL_MIN']}")
    print(f"   ‚Ä¢ Cura M√°xima: {GAME_CONFIG['HEAL_MAX']}")
    
    print("\nüéØ N√≠veis de Dificuldade:")
    for nivel, config in GAME_CONFIG['DIFFICULTY_LEVELS'].items():
        print(f"   ‚Ä¢ {nivel}: Ataque={config['AI_ATTACK']}, Profundidade={config['MINIMAX_DEPTH']}")

if __name__ == "__main__":
    try:
        menu_principal()
    except Exception as e:
        print(f"Erro fatal: {e}")
        sys.exit(1)